[
    {
        "text": " SHA stands for the secure hash algorithm, which is interesting given that they've just kind of been broken",
        "timestamp": [
            0.0,
            5.76
        ],
        "speaker": "UNKNOWN",
        "start": 0.0,
        "end": 5.76,
        "formatted_text": "UNKNOWN:  SHA stands for the secure hash algorithm, which is interesting given that they've just kind of been broken"
    },
    {
        "text": " But I'm not going to talk specifically about the attack on SHA today",
        "timestamp": [
            6.66,
            10.28
        ],
        "speaker": "SPEAKER_00",
        "start": 6.66,
        "end": 10.28,
        "formatted_text": "SPEAKER_00:  But I'm not going to talk specifically about the attack on SHA today"
    },
    {
        "text": " That's for a different video, but",
        "timestamp": [
            11.46,
            13.46
        ],
        "speaker": "SPEAKER_00",
        "start": 11.46,
        "end": 13.46,
        "formatted_text": "SPEAKER_00:  That's for a different video, but"
    },
    {
        "text": " What I wanted to do was talk it in a little bit more detail about hash functions and what they are",
        "timestamp": [
            14.28,
            18.62
        ],
        "speaker": "SPEAKER_00",
        "start": 14.28,
        "end": 18.62,
        "formatted_text": "SPEAKER_00:  What I wanted to do was talk it in a little bit more detail about hash functions and what they are"
    },
    {
        "text": " and",
        "timestamp": [
            19.26,
            20.4
        ],
        "speaker": "SPEAKER_00",
        "start": 19.26,
        "end": 20.4,
        "formatted_text": "SPEAKER_00:  and"
    },
    {
        "text": " How SHA in particular works so you can get an idea of a kind of way these things are implemented",
        "timestamp": [
            20.4,
            24.94
        ],
        "speaker": "SPEAKER_00",
        "start": 20.4,
        "end": 24.94,
        "formatted_text": "SPEAKER_00:  How SHA in particular works so you can get an idea of a kind of way these things are implemented"
    },
    {
        "text": " and how Shara in particular works, so you can get an idea of the kind of way these things are implemented.",
        "timestamp": [
            25.0,
            28.0
        ],
        "speaker": "SPEAKER_00",
        "start": 25.0,
        "end": 28.0,
        "formatted_text": "SPEAKER_00:  and how Shara in particular works, so you can get an idea of the kind of way these things are implemented."
    },
    {
        "text": " Let's have a quick look at what a hash function is, briefly, because Tom Scott's already covered it in his video, and he's gone into a lot of the reasons you might use a hash function.",
        "timestamp": [
            33.0,
            36.0
        ],
        "speaker": "SPEAKER_00",
        "start": 33.0,
        "end": 36.0,
        "formatted_text": "SPEAKER_00:  Let's have a quick look at what a hash function is, briefly, because Tom Scott's already covered it in his video, and he's gone into a lot of the reasons you might use a hash function."
    },
    {
        "text": " The kind of hash functions I'm talking about are not the ones that we've been talking about for hashing passwords.",
        "timestamp": [
            36.0,
            41.0
        ],
        "speaker": "SPEAKER_00",
        "start": 36.0,
        "end": 41.0,
        "formatted_text": "SPEAKER_00:  The kind of hash functions I'm talking about are not the ones that we've been talking about for hashing passwords."
    },
    {
        "text": " Those ones have to be quite slow in some sense because you need them to be secure.",
        "timestamp": [
            41.0,
            45.6
        ],
        "speaker": "SPEAKER_00",
        "start": 41.0,
        "end": 45.6,
        "formatted_text": "SPEAKER_00:  Those ones have to be quite slow in some sense because you need them to be secure."
    },
    {
        "text": " We're going to talk mostly about the hash functions that are used routinely in cryptography for things like message authentication,",
        "timestamp": [
            45.6,
            52.04
        ],
        "speaker": "SPEAKER_00",
        "start": 45.6,
        "end": 52.04,
        "formatted_text": "SPEAKER_00:  We're going to talk mostly about the hash functions that are used routinely in cryptography for things like message authentication,"
    },
    {
        "text": " digital signatures and so on. So they need to be fairly quick both to verify and compute.",
        "timestamp": [
            52.04,
            56.96
        ],
        "speaker": "SPEAKER_00",
        "start": 52.04,
        "end": 56.96,
        "formatted_text": "SPEAKER_00:  digital signatures and so on. So they need to be fairly quick both to verify and compute."
    },
    {
        "text": " A hash function takes some string, right, let's say A, B, C, and it turns it into some fixed length string But it's not usually three long of random so you know a bit string right but so soon the 0 1 1 0 0 1 0 1 1 dot",
        "timestamp": [
            56.96,
            72.76
        ],
        "speaker": "SPEAKER_00",
        "start": 56.96,
        "end": 72.76,
        "formatted_text": "SPEAKER_00:  A hash function takes some string, right, let's say A, B, C, and it turns it into some fixed length string But it's not usually three long of random so you know a bit string right but so soon the 0 1 1 0 0 1 0 1 1 dot"
    },
    {
        "text": " Dot dot going forward this way for however many bits that hash function is now",
        "timestamp": [
            72.76,
            76.46
        ],
        "speaker": "SPEAKER_00",
        "start": 72.76,
        "end": 76.46,
        "formatted_text": "SPEAKER_00:  Dot dot going forward this way for however many bits that hash function is now"
    },
    {
        "text": " There's a few important properties of hash functions that we care about for cryptography",
        "timestamp": [
            76.46,
            80.12
        ],
        "speaker": "SPEAKER_00",
        "start": 76.46,
        "end": 80.12,
        "formatted_text": "SPEAKER_00:  There's a few important properties of hash functions that we care about for cryptography"
    },
    {
        "text": " But the most important one perhaps is that it's essentially pseudo random",
        "timestamp": [
            80.2,
            83.38
        ],
        "speaker": "SPEAKER_00",
        "start": 80.2,
        "end": 83.38,
        "formatted_text": "SPEAKER_00:  But the most important one perhaps is that it's essentially pseudo random"
    },
    {
        "text": " So that means that we put in ABC and we get out something that is in no way like ABC and appears completely random to us",
        "timestamp": [
            83.38,
            89.76
        ],
        "speaker": "SPEAKER_00",
        "start": 83.38,
        "end": 89.76,
        "formatted_text": "SPEAKER_00:  So that means that we put in ABC and we get out something that is in no way like ABC and appears completely random to us"
    },
    {
        "text": " And if we change this even slightly because it's appearing random this is completely changed",
        "timestamp": [
            89.76,
            94.28
        ],
        "speaker": "SPEAKER_00",
        "start": 89.76,
        "end": 94.28,
        "formatted_text": "SPEAKER_00:  And if we change this even slightly because it's appearing random this is completely changed"
    },
    {
        "text": " So let's have a quick look at char one as an example just so we can see this in action",
        "timestamp": [
            94.7,
            98.66
        ],
        "speaker": "SPEAKER_00",
        "start": 94.7,
        "end": 98.66,
        "formatted_text": "SPEAKER_00:  So let's have a quick look at char one as an example just so we can see this in action"
    },
    {
        "text": " I'm on some page that has a script that calculates hashes on the fly so I can put in ABC",
        "timestamp": [
            98.66,
            104.08
        ],
        "speaker": "SPEAKER_00",
        "start": 98.66,
        "end": 104.08,
        "formatted_text": "SPEAKER_00:  I'm on some page that has a script that calculates hashes on the fly so I can put in ABC"
    },
    {
        "text": " has a script that calculates hashes on the fly. So I can put in ABC and you can see that the hash is A999, 3E and so on all the way up to D. This is the",
        "timestamp": [
            106.06,
            110.92
        ],
        "speaker": "SPEAKER_00",
        "start": 106.06,
        "end": 110.92,
        "formatted_text": "SPEAKER_00:  has a script that calculates hashes on the fly. So I can put in ABC and you can see that the hash is A999, 3E and so on all the way up to D. This is the"
    },
    {
        "text": " SHA1 hash. A SHA1 hash is 160 bits long. If I change this C to a D, the hash is",
        "timestamp": [
            110.92,
            117.84
        ],
        "speaker": "SPEAKER_00",
        "start": 110.92,
        "end": 117.84,
        "formatted_text": "SPEAKER_00:  SHA1 hash. A SHA1 hash is 160 bits long. If I change this C to a D, the hash is"
    },
    {
        "text": " completely changed. So there's the appearance of randomness, the idea that",
        "timestamp": [
            117.84,
            121.68
        ],
        "speaker": "SPEAKER_00",
        "start": 117.84,
        "end": 121.68,
        "formatted_text": "SPEAKER_00:  completely changed. So there's the appearance of randomness, the idea that"
    },
    {
        "text": " this hash is actually not related to this at all, even though it is.",
        "timestamp": [
            121.68,
            125.46
        ],
        "speaker": "SPEAKER_00",
        "start": 121.68,
        "end": 125.46,
        "formatted_text": "SPEAKER_00:  this hash is actually not related to this at all, even though it is."
    },
    {
        "text": " And we know it is, because if I put C back again, we're back to A9993.",
        "timestamp": [
            125.46,
            131.24
        ],
        "speaker": "SPEAKER_00",
        "start": 125.46,
        "end": 131.24,
        "formatted_text": "SPEAKER_00:  And we know it is, because if I put C back again, we're back to A9993."
    },
    {
        "text": " So we can use this to verify messages haven't been changed, or verify signatures on certificates,",
        "timestamp": [
            131.24,
            136.76
        ],
        "speaker": "SPEAKER_00",
        "start": 131.24,
        "end": 136.76,
        "formatted_text": "SPEAKER_00:  So we can use this to verify messages haven't been changed, or verify signatures on certificates,"
    },
    {
        "text": " and we can do it knowing that we have the appearance of randomness, but actually it's not random at all.",
        "timestamp": [
            136.76,
            142.24
        ],
        "speaker": "SPEAKER_00",
        "start": 136.76,
        "end": 142.24,
        "formatted_text": "SPEAKER_00:  and we can do it knowing that we have the appearance of randomness, but actually it's not random at all."
    },
    {
        "text": " Today we're going to talk a bit about how you actually write a hash function to do this",
        "timestamp": [
            142.24,
            146.32
        ],
        "speaker": "SPEAKER_00",
        "start": 142.24,
        "end": 146.32,
        "formatted_text": "SPEAKER_00:  Today we're going to talk a bit about how you actually write a hash function to do this"
    },
    {
        "text": " How do we take something that essentially isn't random with a very known structure and turn it into something that looks like nonsense?",
        "timestamp": [
            146.46,
            152.1
        ],
        "speaker": "SPEAKER_00",
        "start": 146.46,
        "end": 152.1,
        "formatted_text": "SPEAKER_00:  How do we take something that essentially isn't random with a very known structure and turn it into something that looks like nonsense?"
    },
    {
        "text": " Such that we can use it now",
        "timestamp": [
            152.22,
            154.22
        ],
        "speaker": "SPEAKER_00",
        "start": 152.22,
        "end": 154.22,
        "formatted_text": "SPEAKER_00:  Such that we can use it now"
    },
    {
        "text": " There'll be people raising a few eyebrows. I'm using char one as an example to do this",
        "timestamp": [
            155.22,
            159.08
        ],
        "speaker": "UNKNOWN",
        "start": 155.22,
        "end": 159.08,
        "formatted_text": "UNKNOWN:  There'll be people raising a few eyebrows. I'm using char one as an example to do this"
    },
    {
        "text": " But actually there's fairly reasonable reasons to do so first of all",
        "timestamp": [
            159.08,
            162.58
        ],
        "speaker": "SPEAKER_00",
        "start": 159.08,
        "end": 162.58,
        "formatted_text": "SPEAKER_00:  But actually there's fairly reasonable reasons to do so first of all"
    },
    {
        "text": " You know we might also talk about the weaknesses at some point",
        "timestamp": [
            162.58,
            165.06
        ],
        "speaker": "SPEAKER_00",
        "start": 162.58,
        "end": 165.06,
        "formatted_text": "SPEAKER_00:  You know we might also talk about the weaknesses at some point"
    },
    {
        "text": " but also char one bears a striking similarity in structure to md4 and md5 which has seen a lot of use historically and",
        "timestamp": [
            165.56,
            172.38
        ],
        "speaker": "SPEAKER_00",
        "start": 165.56,
        "end": 172.38,
        "formatted_text": "SPEAKER_00:  but also char one bears a striking similarity in structure to md4 and md5 which has seen a lot of use historically and"
    },
    {
        "text": " Shar two five six and sha five twelve which is sha two",
        "timestamp": [
            173.44,
            176.7
        ],
        "speaker": "SPEAKER_00",
        "start": 173.44,
        "end": 176.7,
        "formatted_text": "SPEAKER_00:  Shar two five six and sha five twelve which is sha two"
    },
    {
        "text": " Which currently is in some sense for standard that everyone uses right?",
        "timestamp": [
            177.58,
            181.26
        ],
        "speaker": "SPEAKER_00",
        "start": 177.58,
        "end": 181.26,
        "formatted_text": "SPEAKER_00:  Which currently is in some sense for standard that everyone uses right?"
    },
    {
        "text": " Sha three is quite different and that's something else for another day So shah 1 was developed by the NSA and released and published in 1995",
        "timestamp": [
            181.26,
            189.0
        ],
        "speaker": "SPEAKER_00",
        "start": 181.26,
        "end": 189.0,
        "formatted_text": "SPEAKER_00:  Sha three is quite different and that's something else for another day So shah 1 was developed by the NSA and released and published in 1995"
    },
    {
        "text": " Now a lot of people don't trust things that the NSA do sort of by default",
        "timestamp": [
            189.12,
            192.8
        ],
        "speaker": "SPEAKER_00",
        "start": 189.12,
        "end": 192.8,
        "formatted_text": "SPEAKER_00:  Now a lot of people don't trust things that the NSA do sort of by default"
    },
    {
        "text": " Which might be fair, but in this case actually shah 1 was quite good for a long long time",
        "timestamp": [
            193.18,
            198.52
        ],
        "speaker": "SPEAKER_00",
        "start": 193.18,
        "end": 198.52,
        "formatted_text": "SPEAKER_00:  Which might be fair, but in this case actually shah 1 was quite good for a long long time"
    },
    {
        "text": " Where there were some concerns me some more recently much see it more serious concerns, but",
        "timestamp": [
            199.14,
            203.48
        ],
        "speaker": "SPEAKER_00",
        "start": 199.14,
        "end": 203.48,
        "formatted_text": "SPEAKER_00:  Where there were some concerns me some more recently much see it more serious concerns, but"
    },
    {
        "text": " some concerns, more recently, much more serious concerns, but",
        "timestamp": [
            203.5,
            204.88
        ],
        "speaker": "SPEAKER_00",
        "start": 203.5,
        "end": 204.88,
        "formatted_text": "SPEAKER_00:  some concerns, more recently, much more serious concerns, but"
    },
    {
        "text": " Originally the NSA weren't doing it as a backdoor and stuff. The NSA need cryptography just like everyone else and this is a good function",
        "timestamp": [
            210.52,
            211.92
        ],
        "speaker": "SPEAKER_00",
        "start": 210.52,
        "end": 211.92,
        "formatted_text": "SPEAKER_00:  Originally the NSA weren't doing it as a backdoor and stuff. The NSA need cryptography just like everyone else and this is a good function"
    },
    {
        "text": " MD5 had a lot of problems and so what they basically did was extend it and make it better.",
        "timestamp": [
            216.2,
            216.44
        ],
        "speaker": "SPEAKER_00",
        "start": 216.2,
        "end": 216.44,
        "formatted_text": "SPEAKER_00:  MD5 had a lot of problems and so what they basically did was extend it and make it better."
    },
    {
        "text": " Char1 takes any length of string and outputs a",
        "timestamp": [
            218.92,
            220.18
        ],
        "speaker": "SPEAKER_00",
        "start": 218.92,
        "end": 220.18,
        "formatted_text": "SPEAKER_00:  Char1 takes any length of string and outputs a"
    },
    {
        "text": " 160-bit value, right? So that's 160 zeros and ones. The question then becomes I've got a string that could be ABC Or it could be an incredibly long file or you know a whole movie right and I want to calculate",
        "timestamp": [
            227.3,
            232.26
        ],
        "speaker": "SPEAKER_00",
        "start": 227.3,
        "end": 232.26,
        "formatted_text": "SPEAKER_00:  160-bit value, right? So that's 160 zeros and ones. The question then becomes I've got a string that could be ABC Or it could be an incredibly long file or you know a whole movie right and I want to calculate"
    },
    {
        "text": " 160-bit signature of that how do I even get started doing that well the answer is that I basically have a loop that takes",
        "timestamp": [
            232.76,
            239.38
        ],
        "speaker": "SPEAKER_00",
        "start": 232.76,
        "end": 239.38,
        "formatted_text": "SPEAKER_00:  160-bit signature of that how do I even get started doing that well the answer is that I basically have a loop that takes"
    },
    {
        "text": " 512-bit blocks of data one at a time until the files expended",
        "timestamp": [
            240.1,
            244.44
        ],
        "speaker": "SPEAKER_00",
        "start": 240.1,
        "end": 244.44,
        "formatted_text": "SPEAKER_00:  512-bit blocks of data one at a time until the files expended"
    },
    {
        "text": " Let's look at an example of how shall one works on just a single message of exactly the right length",
        "timestamp": [
            244.44,
            248.62
        ],
        "speaker": "SPEAKER_00",
        "start": 244.44,
        "end": 248.62,
        "formatted_text": "SPEAKER_00:  Let's look at an example of how shall one works on just a single message of exactly the right length"
    },
    {
        "text": " And then we'll just talk briefly about what you do when inevitably isn't the right length",
        "timestamp": [
            248.62,
            252.8
        ],
        "speaker": "SPEAKER_00",
        "start": 248.62,
        "end": 252.8,
        "formatted_text": "SPEAKER_00:  And then we'll just talk briefly about what you do when inevitably isn't the right length"
    },
    {
        "text": " Which is almost always right so shall one takes a message of in blocks of 512 bits in length and",
        "timestamp": [
            253.02,
            260.9
        ],
        "speaker": "SPEAKER_00",
        "start": 253.02,
        "end": 260.9,
        "formatted_text": "SPEAKER_00:  Which is almost always right so shall one takes a message of in blocks of 512 bits in length and"
    },
    {
        "text": " If it's only one block if the message is exactly 512 bits in length then we only run it once in essence",
        "timestamp": [
            261.6,
            267.36
        ],
        "speaker": "SPEAKER_00",
        "start": 261.6,
        "end": 267.36,
        "formatted_text": "SPEAKER_00:  If it's only one block if the message is exactly 512 bits in length then we only run it once in essence"
    },
    {
        "text": " And then we output the hash at the end so char one starts with an internal state",
        "timestamp": [
            267.36,
            271.92
        ],
        "speaker": "SPEAKER_00",
        "start": 267.36,
        "end": 271.92,
        "formatted_text": "SPEAKER_00:  And then we output the hash at the end so char one starts with an internal state"
    },
    {
        "text": " Then we bring in bits of our message one at a time and we change that internal state and after we've done that at the very end",
        "timestamp": [
            271.92,
            277.98
        ],
        "speaker": "SPEAKER_00",
        "start": 271.92,
        "end": 277.98,
        "formatted_text": "SPEAKER_00:  Then we bring in bits of our message one at a time and we change that internal state and after we've done that at the very end"
    },
    {
        "text": " When there's no more message left we just read what the internal state is and that's our hash",
        "timestamp": [
            277.98,
            282.0
        ],
        "speaker": "SPEAKER_00",
        "start": 277.98,
        "end": 282.0,
        "formatted_text": "SPEAKER_00:  When there's no more message left we just read what the internal state is and that's our hash"
    },
    {
        "text": " Right, so we're going to basically be taking the internal state and updating it with the message",
        "timestamp": [
            282.22,
            286.56
        ],
        "speaker": "SPEAKER_00",
        "start": 282.22,
        "end": 286.56,
        "formatted_text": "SPEAKER_00:  Right, so we're going to basically be taking the internal state and updating it with the message"
    },
    {
        "text": " until we run out of message and then as soon as that process stops we can read the result. That's how the",
        "timestamp": [
            287.0,
            292.32
        ],
        "speaker": "SPEAKER_00",
        "start": 287.0,
        "end": 292.32,
        "formatted_text": "SPEAKER_00:  until we run out of message and then as soon as that process stops we can read the result. That's how the"
    },
    {
        "text": " sha family of hash functions works. So our internal state we call h, so I'm going to say h naught",
        "timestamp": [
            292.32,
            297.62
        ],
        "speaker": "SPEAKER_00",
        "start": 292.32,
        "end": 297.62,
        "formatted_text": "SPEAKER_00:  sha family of hash functions works. So our internal state we call h, so I'm going to say h naught"
    },
    {
        "text": " h1 h2 h3 and h4. the internal state of shah 1 is exactly the same length as the hash that it produces which is",
        "timestamp": [
            298.52,
            309.4
        ],
        "speaker": "UNKNOWN",
        "start": 298.52,
        "end": 309.4,
        "formatted_text": "UNKNOWN:  h1 h2 h3 and h4. the internal state of shah 1 is exactly the same length as the hash that it produces which is"
    },
    {
        "text": " 160 bits which is 5",
        "timestamp": [
            309.94,
            311.94
        ],
        "speaker": "SPEAKER_00",
        "start": 309.94,
        "end": 311.94,
        "formatted_text": "SPEAKER_00:  160 bits which is 5"
    },
    {
        "text": " 32-bit words four bytes each you know for 32-bit machines would be an int so this is initialized based on some constants",
        "timestamp": [
            312.44,
            319.1
        ],
        "speaker": "SPEAKER_00",
        "start": 312.44,
        "end": 319.1,
        "formatted_text": "SPEAKER_00:  32-bit words four bytes each you know for 32-bit machines would be an int so this is initialized based on some constants"
    },
    {
        "text": " Which is defined in the standard right?",
        "timestamp": [
            319.1,
            320.94
        ],
        "speaker": "SPEAKER_00",
        "start": 319.1,
        "end": 320.94,
        "formatted_text": "SPEAKER_00:  Which is defined in the standard right?"
    },
    {
        "text": " We might talk about that in a bit",
        "timestamp": [
            320.94,
            322.34
        ],
        "speaker": "SPEAKER_00",
        "start": 320.94,
        "end": 322.34,
        "formatted_text": "SPEAKER_00:  We might talk about that in a bit"
    },
    {
        "text": " But it's not very important and what we're going to do is we're going to update these H's",
        "timestamp": [
            322.34,
            325.54
        ],
        "speaker": "SPEAKER_00",
        "start": 322.34,
        "end": 325.54,
        "formatted_text": "SPEAKER_00:  But it's not very important and what we're going to do is we're going to update these H's"
    },
    {
        "text": " As we bring in our message and then at the end we'll see what the H's are and that's our hash function",
        "timestamp": [
            325.54,
            331.0
        ],
        "speaker": "SPEAKER_00",
        "start": 325.54,
        "end": 331.0,
        "formatted_text": "SPEAKER_00:  As we bring in our message and then at the end we'll see what the H's are and that's our hash function"
    },
    {
        "text": " So how do we do this well?",
        "timestamp": [
            331.34,
            332.88
        ],
        "speaker": "SPEAKER_00",
        "start": 331.34,
        "end": 332.88,
        "formatted_text": "SPEAKER_00:  So how do we do this well?"
    },
    {
        "text": " We have something called a compression function. It's going to take in this data and a bit of message",
        "timestamp": [
            332.88,
            337.56
        ],
        "speaker": "SPEAKER_00",
        "start": 332.88,
        "end": 337.56,
        "formatted_text": "SPEAKER_00:  We have something called a compression function. It's going to take in this data and a bit of message"
    },
    {
        "text": " Turn it into another set of H values and that's going to repeat as we have a message",
        "timestamp": [
            338.02,
            342.88
        ],
        "speaker": "SPEAKER_00",
        "start": 338.02,
        "end": 342.88,
        "formatted_text": "SPEAKER_00:  Turn it into another set of H values and that's going to repeat as we have a message"
    },
    {
        "text": " But that's only going to happen once this time because my message is exactly",
        "timestamp": [
            342.88,
            345.66
        ],
        "speaker": "SPEAKER_00",
        "start": 342.88,
        "end": 345.66,
        "formatted_text": "SPEAKER_00:  But that's only going to happen once this time because my message is exactly"
    },
    {
        "text": " 512 which is very handy. So this is our compression function and",
        "timestamp": [
            345.66,
            349.5
        ],
        "speaker": "SPEAKER_00",
        "start": 345.66,
        "end": 349.5,
        "formatted_text": "SPEAKER_00:  512 which is very handy. So this is our compression function and"
    },
    {
        "text": " I'm going to rename these slightly just to confuse everyone to a b c d and e. So at the beginning of our compression function",
        "timestamp": [
            349.98,
            355.98
        ],
        "speaker": "SPEAKER_00",
        "start": 349.98,
        "end": 355.98,
        "formatted_text": "SPEAKER_00:  I'm going to rename these slightly just to confuse everyone to a b c d and e. So at the beginning of our compression function"
    },
    {
        "text": " we copy these this is the internal state into a b c d and e. We then perform 80",
        "timestamp": [
            356.02,
            363.0
        ],
        "speaker": "SPEAKER_00",
        "start": 356.02,
        "end": 363.0,
        "formatted_text": "SPEAKER_00:  we copy these this is the internal state into a b c d and e. We then perform 80"
    },
    {
        "text": " C D and E we then perform 80 rounds of sha compression function, right? Which is like this so times 80 now what that's going to do is take in",
        "timestamp": [
            366.02,
            371.36
        ],
        "speaker": "SPEAKER_00",
        "start": 366.02,
        "end": 371.36,
        "formatted_text": "SPEAKER_00:  C D and E we then perform 80 rounds of sha compression function, right? Which is like this so times 80 now what that's going to do is take in"
    },
    {
        "text": " words from our 512-bit block of our message",
        "timestamp": [
            371.7,
            375.64
        ],
        "speaker": "SPEAKER_00",
        "start": 371.7,
        "end": 375.64,
        "formatted_text": "SPEAKER_00:  words from our 512-bit block of our message"
    },
    {
        "text": " So if this is our message here the message is",
        "timestamp": [
            375.64,
            377.86
        ],
        "speaker": "SPEAKER_00",
        "start": 375.64,
        "end": 377.86,
        "formatted_text": "SPEAKER_00:  So if this is our message here the message is"
    },
    {
        "text": " 512 bits this is going to come in at this point and be mixed in with this a b c and d so",
        "timestamp": [
            378.76,
            384.86
        ],
        "speaker": "SPEAKER_00",
        "start": 378.76,
        "end": 384.86,
        "formatted_text": "SPEAKER_00:  512 bits this is going to come in at this point and be mixed in with this a b c and d so"
    },
    {
        "text": " Well for now we won't talk about exactly what's going on in this compression function",
        "timestamp": [
            385.28,
            388.62
        ],
        "speaker": "SPEAKER_00",
        "start": 385.28,
        "end": 388.62,
        "formatted_text": "SPEAKER_00:  Well for now we won't talk about exactly what's going on in this compression function"
    },
    {
        "text": " But the idea is that the bits of a b c d and e are being combined together",
        "timestamp": [
            388.62,
            392.5
        ],
        "speaker": "SPEAKER_00",
        "start": 388.62,
        "end": 392.5,
        "formatted_text": "SPEAKER_00:  But the idea is that the bits of a b c d and e are being combined together"
    },
    {
        "text": " They're being shuffled they're being commuted around to make it look more and more random as we go",
        "timestamp": [
            392.62,
            397.42
        ],
        "speaker": "SPEAKER_00",
        "start": 392.62,
        "end": 397.42,
        "formatted_text": "SPEAKER_00:  They're being shuffled they're being commuted around to make it look more and more random as we go"
    },
    {
        "text": " And at the same time we're bringing in bits from this message to further increase",
        "timestamp": [
            397.42,
            401.62
        ],
        "speaker": "SPEAKER_00",
        "start": 397.42,
        "end": 401.62,
        "formatted_text": "SPEAKER_00:  And at the same time we're bringing in bits from this message to further increase"
    },
    {
        "text": " The appearance of randomness but also to make sure that this",
        "timestamp": [
            402.1,
            405.18
        ],
        "speaker": "SPEAKER_00",
        "start": 402.1,
        "end": 405.18,
        "formatted_text": "SPEAKER_00:  The appearance of randomness but also to make sure that this"
    },
    {
        "text": " sha function is calculating a digest on this specific message rather than just a general one that's the same every time. For this message",
        "timestamp": [
            405.26,
            411.96
        ],
        "speaker": "SPEAKER_00",
        "start": 405.26,
        "end": 411.96,
        "formatted_text": "SPEAKER_00:  sha function is calculating a digest on this specific message rather than just a general one that's the same every time. For this message"
    },
    {
        "text": " We're always going to perform the exact same algorithm",
        "timestamp": [
            412.0,
            414.7
        ],
        "speaker": "SPEAKER_00",
        "start": 412.0,
        "end": 414.7,
        "formatted_text": "SPEAKER_00:  We're always going to perform the exact same algorithm"
    },
    {
        "text": " So if we put in this message a second time the sha function will produce exactly the same result",
        "timestamp": [
            414.7,
            419.22
        ],
        "speaker": "SPEAKER_00",
        "start": 414.7,
        "end": 419.22,
        "formatted_text": "SPEAKER_00:  So if we put in this message a second time the sha function will produce exactly the same result"
    },
    {
        "text": " Now once we've done this and we've shuffled up a b c d and e we'll be left with a new a b c d and e so a",
        "timestamp": [
            420.06,
            426.5
        ],
        "speaker": "SPEAKER_00",
        "start": 420.06,
        "end": 426.5,
        "formatted_text": "SPEAKER_00:  Now once we've done this and we've shuffled up a b c d and e we'll be left with a new a b c d and e so a"
    },
    {
        "text": " b c d and e and then we finish this",
        "timestamp": [
            427.2,
            430.62
        ],
        "speaker": "SPEAKER_00",
        "start": 427.2,
        "end": 430.62,
        "formatted_text": "SPEAKER_00:  b c d and e and then we finish this"
    },
    {
        "text": " Block by bringing our h values down here and adding them to these values here to create a new",
        "timestamp": [
            430.98,
            438.4
        ],
        "speaker": "SPEAKER_00",
        "start": 430.98,
        "end": 438.4,
        "formatted_text": "SPEAKER_00:  Block by bringing our h values down here and adding them to these values here to create a new"
    },
    {
        "text": " h naught h1",
        "timestamp": [
            439.32,
            441.32
        ],
        "speaker": "SPEAKER_00",
        "start": 439.32,
        "end": 441.32,
        "formatted_text": "SPEAKER_00:  h naught h1"
    },
    {
        "text": " h2 h3 h4 the state has now been updated by whatever we did in this",
        "timestamp": [
            441.62,
            447.18
        ],
        "speaker": "SPEAKER_00",
        "start": 441.62,
        "end": 447.18,
        "formatted_text": "SPEAKER_00:  h2 h3 h4 the state has now been updated by whatever we did in this"
    },
    {
        "text": " compression function by just adding to it all right now all addition in char is",
        "timestamp": [
            447.18,
            451.7
        ],
        "speaker": "SPEAKER_00",
        "start": 447.18,
        "end": 451.7,
        "formatted_text": "SPEAKER_00:  compression function by just adding to it all right now all addition in char is"
    },
    {
        "text": " done without any overflow modulo of 2 to 32 what that means is that if you ever",
        "timestamp": [
            451.7,
            456.62
        ],
        "speaker": "SPEAKER_00",
        "start": 451.7,
        "end": 456.62,
        "formatted_text": "SPEAKER_00:  done without any overflow modulo of 2 to 32 what that means is that if you ever"
    },
    {
        "text": " go over the maximum value allowed by a four byte integer you wrap back around",
        "timestamp": [
            456.62,
            463.28
        ],
        "speaker": "SPEAKER_00",
        "start": 456.62,
        "end": 463.28,
        "formatted_text": "SPEAKER_00:  go over the maximum value allowed by a four byte integer you wrap back around"
    },
    {
        "text": " again right which is one of the reasons why shah can't be reversed because you might lose information that way",
        "timestamp": [
            463.28,
            468.66
        ],
        "speaker": "SPEAKER_00",
        "start": 463.28,
        "end": 468.66,
        "formatted_text": "SPEAKER_00:  again right which is one of the reasons why shah can't be reversed because you might lose information that way"
    },
    {
        "text": " This is not encryption. We don't need to be able to reverse it. So this state is",
        "timestamp": [
            469.3,
            473.34
        ],
        "speaker": "SPEAKER_00",
        "start": 469.3,
        "end": 473.34,
        "formatted_text": "SPEAKER_00:  This is not encryption. We don't need to be able to reverse it. So this state is"
    },
    {
        "text": " Finished now if our message is exactly 512 bits",
        "timestamp": [
            474.12,
            477.7
        ],
        "speaker": "SPEAKER_00",
        "start": 474.12,
        "end": 477.7,
        "formatted_text": "SPEAKER_00:  Finished now if our message is exactly 512 bits"
    },
    {
        "text": " We read these h naught h1 h2 h3 h4 values out that is our hash so for short messages. We're done. I can just you know go home",
        "timestamp": [
            477.74,
            485.92
        ],
        "speaker": "SPEAKER_00",
        "start": 477.74,
        "end": 485.92,
        "formatted_text": "SPEAKER_00:  We read these h naught h1 h2 h3 h4 values out that is our hash so for short messages. We're done. I can just you know go home"
    },
    {
        "text": " In actual fact the the principle of extending this to arbitrary length messages right in increments of 512 bits is",
        "timestamp": [
            487.5,
            494.98
        ],
        "speaker": "UNKNOWN",
        "start": 487.5,
        "end": 494.98,
        "formatted_text": "UNKNOWN:  In actual fact the the principle of extending this to arbitrary length messages right in increments of 512 bits is"
    },
    {
        "text": " We copy this state back up to the top and we repeat the process",
        "timestamp": [
            495.58,
            498.68
        ],
        "speaker": "SPEAKER_00",
        "start": 495.58,
        "end": 498.68,
        "formatted_text": "SPEAKER_00:  We copy this state back up to the top and we repeat the process"
    },
    {
        "text": " And then we copy back up and we repeat the process for as many blocks as we have of our message",
        "timestamp": [
            498.68,
            503.0
        ],
        "speaker": "SPEAKER_00",
        "start": 498.68,
        "end": 503.0,
        "formatted_text": "SPEAKER_00:  And then we copy back up and we repeat the process for as many blocks as we have of our message"
    },
    {
        "text": " 512 bits at a time of our message we feed it in we alter the state using this approach here",
        "timestamp": [
            503.44,
            509.1
        ],
        "speaker": "SPEAKER_00",
        "start": 503.44,
        "end": 509.1,
        "formatted_text": "SPEAKER_00:  512 bits at a time of our message we feed it in we alter the state using this approach here"
    },
    {
        "text": " And then we read off a state when we're done. That's basically how it works",
        "timestamp": [
            509.1,
            513.32
        ],
        "speaker": "SPEAKER_00",
        "start": 509.1,
        "end": 513.32,
        "formatted_text": "SPEAKER_00:  And then we read off a state when we're done. That's basically how it works"
    },
    {
        "text": " So the the security of shah is all in this compression function and what it's doing if it's sure",
        "timestamp": [
            514.04,
            519.76
        ],
        "speaker": "SPEAKER_00",
        "start": 514.04,
        "end": 519.76,
        "formatted_text": "SPEAKER_00:  So the the security of shah is all in this compression function and what it's doing if it's sure"
    },
    {
        "text": " Yeah, if it's not a multiple of 512 bits, we're going to have to do some padding right",
        "timestamp": [
            520.5,
            525.8
        ],
        "speaker": "SPEAKER_00",
        "start": 520.5,
        "end": 525.8,
        "formatted_text": "SPEAKER_00:  Yeah, if it's not a multiple of 512 bits, we're going to have to do some padding right"
    },
    {
        "text": " Shar only works with 512 bit blocks",
        "timestamp": [
            526.36,
            528.9
        ],
        "speaker": "SPEAKER_00",
        "start": 526.36,
        "end": 528.9,
        "formatted_text": "SPEAKER_00:  Shar only works with 512 bit blocks"
    },
    {
        "text": " So what we do is if we have our message, which is let's say 1001 101",
        "timestamp": [
            529.24,
            535.86
        ],
        "speaker": "SPEAKER_00",
        "start": 529.24,
        "end": 535.86,
        "formatted_text": "SPEAKER_00:  So what we do is if we have our message, which is let's say 1001 101"
    },
    {
        "text": " It's not a very long message if we want to pad that up to 512 bits",
        "timestamp": [
            535.86,
            539.4
        ],
        "speaker": "SPEAKER_00",
        "start": 535.86,
        "end": 539.4,
        "formatted_text": "SPEAKER_00:  It's not a very long message if we want to pad that up to 512 bits"
    },
    {
        "text": " We start with a 1 we pad with 11 right?",
        "timestamp": [
            539.56,
            543.02
        ],
        "speaker": "SPEAKER_00",
        "start": 539.56,
        "end": 543.02,
        "formatted_text": "SPEAKER_00:  We start with a 1 we pad with 11 right?"
    },
    {
        "text": " So I'm going to sort of of demarcate the padding here so we know.",
        "timestamp": [
            543.02,
            546.8
        ],
        "speaker": "SPEAKER_00",
        "start": 543.02,
        "end": 546.8,
        "formatted_text": "SPEAKER_00:  So I'm going to sort of of demarcate the padding here so we know."
    },
    {
        "text": " We go with 0, 0, 0, 0, and then we finish off the message with the length of the actual message in it,",
        "timestamp": [
            546.8,
            553.74
        ],
        "speaker": "SPEAKER_00",
        "start": 546.8,
        "end": 553.74,
        "formatted_text": "SPEAKER_00:  We go with 0, 0, 0, 0, and then we finish off the message with the length of the actual message in it,"
    },
    {
        "text": " so we know where to sort of remove the padding, which in this case is 7, so in binary, 111.",
        "timestamp": [
            553.74,
            559.56
        ],
        "speaker": "SPEAKER_00",
        "start": 553.74,
        "end": 559.56,
        "formatted_text": "SPEAKER_00:  so we know where to sort of remove the padding, which in this case is 7, so in binary, 111."
    },
    {
        "text": " So 111.",
        "timestamp": [
            559.56,
            561.22
        ],
        "speaker": "SPEAKER_00",
        "start": 559.56,
        "end": 561.22,
        "formatted_text": "SPEAKER_00:  So 111."
    },
    {
        "text": " Obviously would allot more bits for your length than I have done right yet the idea now this padding scheme",
        "timestamp": [
            561.22,
            567.34
        ],
        "speaker": "SPEAKER_00",
        "start": 561.22,
        "end": 567.34,
        "formatted_text": "SPEAKER_00:  Obviously would allot more bits for your length than I have done right yet the idea now this padding scheme"
    },
    {
        "text": " ensures that messages of the same length and messages end in the same way or in very similar ways don't share the same padding",
        "timestamp": [
            567.94,
            575.2
        ],
        "speaker": "SPEAKER_00",
        "start": 567.94,
        "end": 575.2,
        "formatted_text": "SPEAKER_00:  ensures that messages of the same length and messages end in the same way or in very similar ways don't share the same padding"
    },
    {
        "text": " And don't end up being the same that's very important",
        "timestamp": [
            575.66,
            578.32
        ],
        "speaker": "SPEAKER_00",
        "start": 575.66,
        "end": 578.32,
        "formatted_text": "SPEAKER_00:  And don't end up being the same that's very important"
    },
    {
        "text": " So this approach to sharp is repetitive",
        "timestamp": [
            578.68,
            581.38
        ],
        "speaker": "SPEAKER_00",
        "start": 578.68,
        "end": 581.38,
        "formatted_text": "SPEAKER_00:  So this approach to sharp is repetitive"
    },
    {
        "text": " Updating of the internal state with a compression function is in essence is called a Merkel dam guard construction",
        "timestamp": [
            581.94,
            587.6
        ],
        "speaker": "SPEAKER_00",
        "start": 581.94,
        "end": 587.6,
        "formatted_text": "SPEAKER_00:  Updating of the internal state with a compression function is in essence is called a Merkel dam guard construction"
    },
    {
        "text": " This was sort of independently proved by a Merkel and dam guard",
        "timestamp": [
            588.78,
            591.42
        ],
        "speaker": "SPEAKER_00",
        "start": 588.78,
        "end": 591.42,
        "formatted_text": "SPEAKER_00:  This was sort of independently proved by a Merkel and dam guard"
    },
    {
        "text": " But essentially what's good about it is if your compression function is good and has good pseudo random properties",
        "timestamp": [
            591.98,
            597.88
        ],
        "speaker": "SPEAKER_00",
        "start": 591.98,
        "end": 597.88,
        "formatted_text": "SPEAKER_00:  But essentially what's good about it is if your compression function is good and has good pseudo random properties"
    },
    {
        "text": " Then so does your Shar function, which is of course very useful",
        "timestamp": [
            597.88,
            601.4
        ],
        "speaker": "SPEAKER_00",
        "start": 597.88,
        "end": 601.4,
        "formatted_text": "SPEAKER_00:  Then so does your Shar function, which is of course very useful"
    },
    {
        "text": " which is of course very useful.",
        "timestamp": [
            602.0,
            605.0
        ],
        "speaker": "SPEAKER_00",
        "start": 602.0,
        "end": 605.0,
        "formatted_text": "SPEAKER_00:  which is of course very useful."
    },
    {
        "text": " The problem is that the compression function of SHA-1 is not so good that the attacks are 2 to the 80. They can be reduced somewhat to about 2 to the 60, something like this.",
        "timestamp": [
            612.0,
            615.0
        ],
        "speaker": "SPEAKER_00",
        "start": 612.0,
        "end": 615.0,
        "formatted_text": "SPEAKER_00:  The problem is that the compression function of SHA-1 is not so good that the attacks are 2 to the 80. They can be reduced somewhat to about 2 to the 60, something like this."
    },
    {
        "text": " Which becomes into the realm of possibility for people with a lot of money.",
        "timestamp": [
            615.0,
            620.0
        ],
        "speaker": "SPEAKER_00",
        "start": 615.0,
        "end": 620.0,
        "formatted_text": "SPEAKER_00:  Which becomes into the realm of possibility for people with a lot of money."
    }
]